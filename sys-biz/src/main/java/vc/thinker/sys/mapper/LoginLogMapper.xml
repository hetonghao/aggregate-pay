<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="vc.thinker.sys.mapper.LoginLogMapper" >
  <resultMap id="BaseResultMap" type="vc.thinker.sys.model.LoginLog" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="login_ip" property="loginIp" jdbcType="VARCHAR" />
    <result column="login_area" property="loginArea" jdbcType="VARCHAR" />
    <result column="login_time" property="loginTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ExtendBaseResultMap" type="vc.thinker.sys.bo.LoginLogBO" extends="BaseResultMap">
  	<result column="user_name" property="userName" jdbcType="VARCHAR"/>
  	<result column="no" property="no" jdbcType="VARCHAR"/>
  </resultMap>
  
  <select id="findCountByPage" resultType="Long" parameterType="Map">
		SELECT
			count(1)
		FROM
			sys_login_log l,
			user_admin u
		<include refid="findByPageWhere"/>
	</select>
	
	<select id="findByPage" resultMap="ExtendBaseResultMap" parameterType="Map">
		SELECT
			l.*, u.name userName,
			u. NO
		FROM
			sys_login_log l,
			user_admin u
		<include refid="findByPageWhere"/>
		ORDER BY l.login_time desc
	</select>
	
	<sql id="findByPageWhere">
		<where>
			l.user_id = u.uid
			<if test="param.userName != null and param.userName != ''">
				AND u.`name` LIKE CONCAT('%', #{param.userName}, '%')
			</if>
			<if test="param.no != null and param.no != ''">
				AND `no` = #{param.no}
			</if>
			  <choose>
			    <when test="param.beginDate != null and param.endDate != null">
			     	And DATE_FORMAT(l.login_time, '%Y-%m-%d') BETWEEN  #{param.beginDate} and  #{param.endDate}
			    </when>
			    <when test="param.beginDate != null">
					And DATE_FORMAT(l.login_time, '%Y-%m-%d') <![CDATA[>=]]> #{param.beginDate}
			    </when>
			    <when test="param.endDate != null">
					And DATE_FORMAT(l.login_time, '%Y-%m-%d') <![CDATA[<=]]> #{param.endDate}
			    </when>
			  </choose>
		</where>
	</sql>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, user_id, login_ip, login_area, login_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="vc.thinker.sys.model.LoginLogExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sys_login_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="Long" >
    select 
    <include refid="Base_Column_List" />
    from sys_login_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="Long" >
    delete from sys_login_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="vc.thinker.sys.model.LoginLogExample" >
    delete from sys_login_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="vc.thinker.sys.model.LoginLog" >
    insert into sys_login_log (id, user_id, login_ip, 
      login_area, login_time)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{loginIp,jdbcType=VARCHAR}, 
      #{loginArea,jdbcType=VARCHAR}, #{loginTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="vc.thinker.sys.model.LoginLog" >
    insert into sys_login_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="loginIp != null" >
        login_ip,
      </if>
      <if test="loginArea != null" >
        login_area,
      </if>
      <if test="loginTime != null" >
        login_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="loginIp != null" >
        #{loginIp,jdbcType=VARCHAR},
      </if>
      <if test="loginArea != null" >
        #{loginArea,jdbcType=VARCHAR},
      </if>
      <if test="loginTime != null" >
        #{loginTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="vc.thinker.sys.model.LoginLogExample" resultType="java.lang.Integer" >
    select count(*) from sys_login_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update sys_login_log
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.loginIp != null" >
        login_ip = #{record.loginIp,jdbcType=VARCHAR},
      </if>
      <if test="record.loginArea != null" >
        login_area = #{record.loginArea,jdbcType=VARCHAR},
      </if>
      <if test="record.loginTime != null" >
        login_time = #{record.loginTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update sys_login_log
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      login_ip = #{record.loginIp,jdbcType=VARCHAR},
      login_area = #{record.loginArea,jdbcType=VARCHAR},
      login_time = #{record.loginTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="vc.thinker.sys.model.LoginLog" >
    update sys_login_log
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="loginIp != null" >
        login_ip = #{loginIp,jdbcType=VARCHAR},
      </if>
      <if test="loginArea != null" >
        login_area = #{loginArea,jdbcType=VARCHAR},
      </if>
      <if test="loginTime != null" >
        login_time = #{loginTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="vc.thinker.sys.model.LoginLog" >
    update sys_login_log
    set user_id = #{userId,jdbcType=INTEGER},
      login_ip = #{loginIp,jdbcType=VARCHAR},
      login_area = #{loginArea,jdbcType=VARCHAR},
      login_time = #{loginTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>